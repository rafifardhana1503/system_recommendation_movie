# -*- coding: utf-8 -*-
"""sistem rekomendasi movie_notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MijkAc70GYUkASpFcbxamVs0IwHEAZfU

# Business Understanding

Dengan semakin banyaknya konten yang tersedia di platform streaming film, pengguna dihadapkan pada pilihan yang sangat beragam. Tanpa bantuan sistem yang tepat, pengguna mungkin kesulitan menemukan konten yang sesuai dengan preferensi mereka, yang dapat berdampak pada pengalaman pengguna (user experience) dan keterlibatan mereka dengan platform. Dari sudut pandang bisnis, menampilkan konten yang relevan secara konsisten dapat meningkatkan waktu tayang pengguna (watch time), retensi pelanggan, dan pada akhirnya meningkatkan pendapatan melalui langganan yang lebih lama atau konsumsi konten berbayar yang lebih banyak.

**Problem Statements**
- Bagaimana solusi bagi pengguna agar tidak kesulitan dalam menemukan konten film sesuai dengan preferensi mereka pada platform streaming?  
- Bagaimana memberikan suatu pertimbangan bagi pengguna untuk bertahan dalam menggunakan platform streaming?

**Goals**
- Mengembangkan sistem rekomendasi film berbasis content-based filtering.
- Memberikan output top-N rekomendasi film yang mirip dengan film yang dipilih pengguna.

**Solution statements**
- Menggunakan pendekatan Content-Based Filtering, hal ini dilakukan dengan memanfaatkan deskripsi film, genre, aktor, dan sutradara sebagai fitur konten. Kemiripan antar film akan diukur berdasarkan kesamaan fitur-fitur ini.
- Menggunakan teknik pemrosesan bahasa alami (NLP) seperti tokenization, lowercasing, dan stemming pada deskripsi film.
- Menggunakan algoritma Term Frequency-Inverse Document Frequency (TF-IDF) untuk mengubah teks deskripsi menjadi vektor numerik.
- Menghitung cosine similarity antara vektor representasi film untuk mengukur kemiripan konten.

# Data Understanding

Dataset yang digunakan merupakan dataset yang berisikan informasi detail mengenai berbagai film, termasuk judul, tanggal rilis, genre, sinopsis, aktor, sutradara, rating, dan lain-lain. Dataset ini diperoleh dari Kaggle.
- Dataset ini terdiri dari dua file yaitu `movies.csv` dan `credits.csv`
- Dataset memiliki 4800+ baris
- Link Dataset: [TMDB 5000 Movie Dataset](https://www.kaggle.com/datasets/tmdb/tmdb-movie-metadata)

Variabel-variabel pada TMDB 500 Movie Dataset adalah sebagai berikut. Variabel yang dijelaskan merupakan variabel yang dipilih sebab dianggap penting dalam pembangunan model sistem rekomendasi.
- id : kode unik dari masing-masing film
- title : judul film
- genres : pengelompokan film berdasarkan kesamaan gaya atau tema
- keywords : kata kunci yang menunjukkan identikal dari film
- overview : deskripsi gambaran umum dari film
- cast : aktor/aktris yang berperan dalam film
- crew : sekelompok orang yang berada di balik layar pembuatan film

## Import Library
"""

import pandas as pd
import numpy as np
import json
import re

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize

nltk.download('punkt_tab')
nltk.download('stopwords')
nltk.download('wordnet')

"""## Data Loading"""

df_movies = pd.read_csv("/content/tmdb_5000_movies.csv")
df_credits = pd.read_csv("/content/tmdb_5000_credits.csv")

"""## Exploratory Data Analysis

Dalam Exploratory Data Analysis (EDA) ini akan dilakukan dua tahap analisis, yaitu:
- Univariate Analysis (menganalisis masing-masing informasi dari dataset)
- Data Preprocessing (melakukan pengolahan pada bagian isi data)

### Univariate Analysis

1. Movies Dataset
"""

# Menampilkan dataset movies
df_movies.head()

df_movies.info()

print("Banyak judul film:", len(df_movies.title.unique()))

"""Dari analisis di atas terdapat 20 kolom fitur yang terdiri dari kurang lebih 4803 baris pada dataset movie. Banyaknya judul film pada dataset berjumlah 4800 film, hal ini menandakan adanya indikasi duplikasi data atau missing value, sebab maksimal baris data pada kolom "title" berjumlah 4803 judul

2. Credits Dataset
"""

# Menampilkan dataset credits
df_credits.head()

df_credits.info()

"""Dari analisis di atas terdapat 4 kolom fitur dan 4803 baris pada dataset credits

### Data Preprocessing

1. Mengubah dan Memastikan Nama Kolom
"""

# Mengubah nama kolom "movie_id" pada dataset credits menjadi "id"
df_credits = df_credits.rename(columns={"movie_id": "id"})
df_credits.info()

"""Hal ini bertujuan untuk menyelaraskan nama kolom id pada kedua dataset sebelum melakukan penggabungan (merge) dataset"""

# Memastikan kolom id dan title di kedua dataset sama
df_movies[['id', 'title']].head()

df_credits[['id', 'title']].head()

# Menghapus kolom title di dataset credits
df_credits = df_credits.drop(columns=['title'])

"""Membandingkan kolom "id" dan "title" pada kedua dataset untuk memastikan bahwa nomor id dan judul film sama dengan melihat beberapa sampel baris. Kemudian melakukan drop(hapus) kolom "title" pada salah satu dataset untuk melakukan proses penggabungan agar kolom tidak double.

2. Menggabungkan Dataset
"""

# Menggabungkan dataset movies dan credits
df_merge = df_movies.merge(df_credits, on="id", how="left")
df_merge.head(1)

df_merge.info()

"""Menggabungkan kedua dataset untuk proses persiapan data, salah satunya seleksi fitur. Sebab kita membutuhkan beberapa fitur yang ada pada dataset credits, sehingga perlu dilakukan penggabungan (merge). Menghasilkan 22 kolom fitur pada dataset baru

# Data Preparation

1. Seleksi Fitur, Penanganan Missing Value, Pengecekan Duplikasi
"""

# Seleksi fitur yang akan digunakan
df = df_merge[["id", "title", "genres", "keywords", "overview", "cast", "crew"]]
df.isnull().sum()

df.dropna(inplace=True)
df.shape

print("Jumlah duplikasi data: ", df.duplicated().sum())
df.head(1)

"""Membuat dataset baru, dengan memilih fitur yang dibutuhkan saja. Kemudian melakukan pengecekan terhadap missing value dan duplikasi pada fitur. Terindikasi 3 missing value pada overview. Sebab gambaran umum dari film tidak kita ketahui, lebih baik baris missing value di hapus. Sehingga dataset terdiri dari 4800 baris dan 7 kolom penting

2. Mengekstrak dan Menggabungkan List
"""

# Ekstrasi fitur
def extract_list(text):
    try:
        data = json.loads(text)
        return [item['name'] for item in data]
    except:
        return []

df['genres'] = df['genres'].apply(extract_list)
df['keywords'] = df['keywords'].apply(extract_list)
df['cast'] = df['cast'].apply(lambda x: extract_list(x)[:3]) # Ambil 3 aktor pertama
df['crew'] = df['crew'].apply(lambda x: [item['name'] for item in json.loads(x) if item['job'] == 'Director'][0] if any(item['job'] == 'Director' for item in json.loads(x)) else '')

df.head(1)

""" Beberapa kolom seperti genres, keywords, cast, dan crew berisi data dalam format JSON. Perlu dilakukan ekstraksi untuk mendapatkan daftar genre, kata kunci, nama aktor, dan nama sutradara."""

# Penggabungan Fitur Teks
def combine_features(row):
    overview = row['overview'].split() if isinstance(row['overview'], str) else []
    return ' '.join(overview + row['genres'] + row['keywords']*2 + row['cast']*3 + [row['crew']]*2)

df["tags"] = df.apply(combine_features, axis=1)

df.head(1)

"""Menggabungkan teks dari kolom overview, daftar genre, keywords, nama aktor, dan nama sutradara menjadi satu representasi teks (kolom "tags") untuk setiap film. Ini akan menjadi input utama untuk perhitungan kemiripan konten. Selain itu memberikan pembobotan pada fitur yang dianggap berpengaruh seperti fitur keywords, cast, dan crew"""

df_final = df[["id", "title", "tags"]]
df_final.head(1)

"""Membuat dataset final yang terdiri dari id film, judul film, dan representasi film (tags)

3. Normalisasi Teks List (Cleaning Text)
"""

stop_words = set(stopwords.words('english'))
lemmatizer = WordNetLemmatizer()

def clean_text(text):
    text = text.lower() # Mengubah teks menjadi huruf kecil
    text = re.sub(r'[^a-zA-Z\s]', '', text) # Hilangkan karakter selain huruf dan spasi
    tokens = word_tokenize(text) # Tokenisasi (memecah kalimat jadi kata-kata)
    tokens = [lemmatizer.lemmatize(word) for word in tokens if word not in stop_words] # Hilangkan stopwords & lemmatize
    return ' '.join(tokens) # Gabungkan kembali jadi string

df_final['tags'].apply(clean_text)

df_final['tags'] = df_final['tags'].apply(clean_text)
df_final.head()

"""Melakukan pembersihan (normalisasi) teks pada kolom "tags" sebelum masuk ke tahap modeling. Hal ini dilakukan agar model dapat mengolah representasi film untuk memperoleh hasil konten yang serupa
- Lowercase: Mengubah teks menjadi huruf kecil
- Re.sub: Menghilangkan karakter yang bukan spasi dan huruf
- Tokenisasi: Memecah teks menjadi unit-unit kata (token)
- Stopword Removal: Menghapus kata-kata umum dalam bahasa inggris yang tidak memiliki banyak informasi semantik
- Lemmatization: Mengembalikan kata-kata ke dalam bentuk dasarnya, misalnya stories menjadi story

# Model Development

Pada tahap ini, pengembangan model dilakukan dengan menggunakan
- Representasi Fitur (kolom "tags") yaitu gabungan antara fitur overview, genres, keywords, cast, dan crew.
- Menerapkan algoritma TF-IDF terhadap fitur gabungan untuk mengubahnya menjadi vektor numerik.
- Menghitung cosine similarity antara vektor TF-IDF dari fitur yang telah divektorkan terhadap film. Cosine similarity mengukur sudut antara dua vektor, dengan nilai 1 menunjukkan kemiripan sempurna dan nilai 0 menunjukkan tidak ada kemiripan
- Untuk memberikan rekomendasi untuk film tertentu, sistem akan mencari film-film lain dengan nilai cosine similarity tertinggi terhadap film tersebut.
"""

tfidf_vectorizer = TfidfVectorizer(max_features=5000, stop_words='english', ngram_range=(1,2))
tfidf_matrix = tfidf_vectorizer.fit_transform(df_final['tags'])

# Cosine Similarity
cosine_sim = cosine_similarity(tfidf_matrix)

# Membuat reverse mapping dari indeks ke judul film
indices = pd.Series(df_final.index, index=df_final['title']).drop_duplicates()

# Fungsi untuk Mendapatkan Rekomendasi dengan Skor Cosine Similarity
def get_recommendations_with_scores(title, cosine_sim=cosine_sim, df=df_final, indices=indices):
    try:
        idx = indices[title]
    except KeyError:
        print(f"Film '{title}' tidak ditemukan dalam dataset.")
        return []

    # Dapatkan skor similaritas untuk film tersebut dengan semua film lain
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Urutkan film berdasarkan skor similaritas
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Dapatkan skor untuk 10 film yang paling mirip (tidak termasuk film itu sendiri)
    sim_scores = sim_scores[1:11]

    # Dapatkan indeks film dan skor similaritas
    movie_indices = [i[0] for i in sim_scores]
    similarity_scores = [i[1] for i in sim_scores]

    # Kembalikan DataFrame yang berisi judul dan skor similaritas
    df_recommendations = pd.DataFrame({'title': df_final['title'].iloc[movie_indices], 'similarity_score': similarity_scores})
    return df_recommendations

"""# Evaluasi"""

# Contoh penggunaan sistem rekomendasi 1 (satu) dengan skor
movie_title = "Iron Man"
recommendations_with_scores = get_recommendations_with_scores(movie_title)

print(f"\nRekomendasi film untuk '{movie_title}' dengan perhitungan Cosine Similarity:")
print(recommendations_with_scores)

# Contoh penggunaan sistem rekomendasi 2 (dua) dengan skor
movie_title = "The Fast and the Furious"
recommendations_with_scores = get_recommendations_with_scores(movie_title)

print(f"\nRekomendasi film untuk '{movie_title}' dengan Cosine Similarity:")
print(recommendations_with_scores)

"""**Metode Evaluasi**

Evaluasi ini tidak menggunakan metrik numerik, sebab evaluasi lebih difokuskan terhadap relevansi rekomendasi berdasarkan fitur metadata.

Evaluasi ini hanya dapat dilihat dari cosine similarity (skor kemiripan) terhadap film yang dipilih.
- Lebih dari 60: Sangat mirip (biasanya sekuel atau series)
- 0.50 - 0.60: Masih sangat relevan
- 0.30 - 0.50: Mirip secara tema/genre/universe
- < 30: Sudah mulai kurang relevan, bisa secara tema/genre/universe/pemeran/sutradara

**Evaluasi penggunaan sistem rekomendasi 1 (satu)**
- Top 5 rekomendasi sangat baik — semuanya berada dalam narasi atau konflik yang dekat dengan Tony Stark/Iron Man.
- Skor cosine similarity di atas 0.4 bisa dianggap cukup bagus untuk TF-IDF sederhana.
- Film seperti Iron Man 2, Iron Man 3, dan Civil War memang secara narasi dan karakter sangat dekat.
- Urutan 6 ke bawah memang memiliki skor cosine rendah tetapi masih ada relevansi tema dan universe yang sama dari alur film Iron Man

**Evaluasi penggunaan sistem rekomendasi 2 (dua)**
- Top 3 rekomendasi sangat baik - semuanya relevan sebab berasal dari produksi yang sama, memiliki karakter utama yang sama, tema dan gaya penyutradaraan mirip.
- Rekomendasi film urutan 3 ke atas memiliki narasi yang sangat dekat sebab film-film ini merupakan bagian dari cerita sekuensial film yang dipilih
- Urutan 4 ke bawah memiliki skor cosine sedang ke rendah, sebab relevansi nya hanya pemeran utama, genre, dan aksi yang sama. Tidak memiliki relevansi yang kuat dengan cerita Fast & Furious

"""